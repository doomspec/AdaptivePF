from math import sqrt

from mizore.block import TrotterEvolutionBlock
def get_first_trotter_gate_count(hamiltonian,gate_name="CNOT"):
    return TrotterEvolutionBlock(hamiltonian, n_trotter_step=1, evolution_time=0.1).get_gate_used()[gate_name]


def get_n_measurement(lam, hamil_weight, A, C, Delta):
    var_coeff = get_var_coeff_by_lambda(lam, hamil_weight, A, C)
    return get_n_measurement_with_var_coeff(var_coeff, Delta)


def get_n_measurement_with_var_coeff(var_coeff, Delta):
    fail_prob = 0.3
    expected_error=Delta/2
    nM = var_coeff / (4 * (Delta ** 2) * (expected_error ** 2) * fail_prob)
    return nM

def get_var_coeff_by_lambda_old(lam, hamil_weight):
    nO = len(lam)
    coeff_sum = 0.0
    nA = []
    for i in range(nO):
        nAi = []
        for j in range(i):
            nAij = abs(2 * lam[i] * lam[j])
            coeff_sum += nAij
            nAi.append(nAij)
        nA.append(nAi)

    nC = []
    for i in range(nO):
        nCi = abs(2 * lam[i] * hamil_weight)
        coeff_sum += nCi
        nC.append(nCi)

    if coeff_sum < 1e-6:
        return 1e10
        #print(lam)

    for i in range(nO):
        for j in range(i):
            nA[i][j] = nA[i][j] / coeff_sum
    for i in range(nO):
        nC[i] = nC[i] / coeff_sum

    var_coeff = 0.0
    for i in range(nO):
        for j in range(i):
            var_coeff += (2 * lam[i] * lam[j]) ** 2 / nA[i][j]
    for i in range(nO):
        var_coeff += (2 * lam[i] * hamil_weight) ** 2 / nC[i]
    return var_coeff

def get_var_coeff_by_lambda(lam_, hamil_weight, A_, C_):
    lam = lam_[1:]
    A = A_[1:,1:]
    C = C_[1:]
    nO = len(lam)
    coeff = 0.0
    for i in range(nO):
        for j in range(i):
            coeff += abs(lam[i] * lam[j])*sqrt(1-A[i][j]**2)

    for i in range(nO):
        coeff += abs(lam[i] * hamil_weight)*sqrt(1-(C[i]/hamil_weight)**2)

    return 4*(coeff**2)

if __name__ == '__main__':
    lam = [-0.9209431016975802, 0.1193398491060207, 0.006502566478627541, -0.006502566478627541, 0.11933984910602075, 0.006502566478627528, -0.006502566478627528, 0.07128067480818392, 0.01055602957596721, -0.01055602957596721, 0.0712806748081837, -0.010556029575967203, 0.010556029575967203, -0.006895601523234117, -0.00689560152323412, -0.10062379255443199, -0.1006237925544319, 0.1012584698790691, -0.01684412933592338, -0.01684412933592338, 0.03974614655570157, 0.03974614655570157, 0.03974614655570157, 0.03974614655570157, -0.009066503636716928, 0.009066503636716928, -0.009066503636716928, -0.009066503636716928, 0.01684412933592338, -0.01684412933592338, 0.028779297231315636, 0.028779297231315636, 0.028779297231315636, 0.028779297231315636, 0.00906650363671693, -0.00906650363671693, 0.00906650363671693, 0.00906650363671693, 0.02749003060695818, 0.02749003060695818, 0.02749003060695818, 0.02749003060695818, 0.05022275070864114, -0.00839702426387242, 0.00839702426387242, 0.016788907742034658, -0.016788907742034658, 0.0083737081622962, -0.019986784020687265, 0.011613075858391058, 0.011613075858391058, -0.019986784020687265, 0.0083737081622962, 0.08996889726434272, -0.0040207345280307396, 0.0040207345280307396, -0.0208096422700654, 0.0208096422700654, -0.0208096422700654, -0.0208096422700654, 0.02001863930532105, -0.02001863930532105, -0.02001863930532105, 0.02001863930532105, 0.01746352790058935, -0.01746352790058935, -0.028392347467617256, 0.028392347467617256, 0.028392347467617256, -0.028392347467617256, 0.06236586955336514, 0.09114516678468078, -0.0029752320646089557, -0.0029752320646089557, 0.04000542332600831, -0.04000542332600831, -0.04000542332600831, 0.04000542332600831, -0.008885585428164342, 0.008885585428164342, 0.008885585428164342, 0.008885585428164342, 0.0778457245185976, 0.008600564826019843, -0.008600564826019843, 0.10533575512555579, 0.017486150254184183, -0.017486150254184183, 0.08996889726434272, -0.0040207345280307396, 0.0040207345280307396, 0.0208096422700654, -0.0208096422700654, 0.0208096422700654, 0.0208096422700654, 0.02001863930532105, -0.02001863930532105, -0.02001863930532105, 0.02001863930532105, -0.01746352790058935, 0.01746352790058935, -0.028392347467617256, 0.028392347467617256, 0.028392347467617256, -0.028392347467617256, 0.05022275070864114, 0.00839702426387242, -0.00839702426387242, 0.016788907742034658, 0.016788907742034658, -0.0083737081622962, -0.019986784020687265, 0.011613075858391058, 0.011613075858391058, -0.019986784020687265, -0.0083737081622962, 0.09114516678468078, -0.0029752320646089557, 0.0029752320646089557, 0.04000542332600831, -0.04000542332600831, -0.04000542332600831, 0.04000542332600831, 0.008885585428164342, -0.008885585428164342, -0.008885585428164342, -0.008885585428164342, 0.06236586955336514, 0.10533575512555579, 0.017486150254184183, -0.017486150254184183, 0.0778457245185976, -0.008600564826019843, -0.008600564826019843, 0.09406525726461544, 0.002614770507685316, 0.002614770507685316, 0.035177926796539805, 0.035177926796539805, 0.035177926796539805, 0.035177926796539805, -0.002614770507685316, 0.002614770507685316, 0.029448678935248215, 0.029448678935248215, 0.029448678935248215, 0.029448678935248215, 0.05893193273398456, -0.018447077451063082, 0.018447077451063082, 0.09410985953052436, 0.003301124641907121, -0.003301124641907121, -0.021748202092970206, -0.021748202092970206, -0.021748202092970206, 0.021748202092970206, 0.06483219160654044, 0.09428087054178866, 0.01865486773569038, 0.01865486773569038, 0.09410985953052436, -0.003301124641907121, 0.003301124641907121, -0.021748202092970206, 0.021748202092970206, 0.021748202092970206, 0.021748202092970206, 0.05893193273398456, 0.018447077451063082, -0.018447077451063082, 0.09428087054178866, 0.018654867735690382, -0.018654867735690382, 0.06483219160654044, 0.09690724767421612, 0.04234753610474028, 0.04234753610474028, 0.04234753610474028, 0.04234753610474028, 0.05391513900901963, 0.0962626751137599, 0.0962626751137599, 0.05391513900901963, 0.11281036710500307]
    lam_abs = [abs(l) for l in lam]
    hamil_weight = sum(lam_abs)
    lam_even = [hamil_weight/len(lam)]*len(lam)
    print(lam_even)
    print(hamil_weight)
    print(get_var_coeff_by_lambda(lam, 0.00001))
    print(get_var_coeff_by_lambda(lam_even, 0.00001))